// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String   @unique
  email          String   @unique
  hashedPassword String?
  role           String   @default("USER")
  avatar         String   @default("/default.png")
  local          String?  @default("")
  www            String?  @default("")
  fullName       String?  @default("")
  about          String?  @default("")
  wallpaper      String?  @default("")
  banned         Boolean  @default(false)

  tokens    Token[]
  sessions  Session[]
  statuses  Status[]
  votes     Vote[]
  followers Follows[] @relation("follower")
  following Follows[] @relation("following")
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

enum TokenType {
  RESET_PASSWORD
}

model Status {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    String
  transport String   @default("WWW")
  to        Int?
  isPublic  Boolean  @default(true)

  User   User?  @relation(fields: [userId], references: [id])
  userId Int?
  votes  Vote[]
}

model Vote {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Status   Status? @relation(fields: [statusId], references: [id])
  statusId Int?
  User     User?   @relation(fields: [userId], references: [id])
  userId   Int?
}

model Follows {
  follower    User @relation("follower", fields: [followerId], references: [id])
  followerId  Int
  following   User @relation("following", fields: [followingId], references: [id])
  followingId Int

  @@id([followerId, followingId])
}

model Blocked {
  id        Int  @id @default(autoincrement())
  userId    Int?
  blockedId Int?
}
